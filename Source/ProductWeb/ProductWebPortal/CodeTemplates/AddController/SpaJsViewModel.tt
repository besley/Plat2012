<#@ template language="C#" HostSpecific="True" #>
<#@ Output Extension="js" #>
<#@ assembly name="System.ComponentModel.DataAnnotations" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="System.Data.Linq" #>
<#@ assembly name="Microsoft.CSharp" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.ComponentModel.DataAnnotations" #>
<#@ import namespace="System.Data.Linq.Mapping" #>
<#@ import namespace="System.Data.Objects.DataClasses" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="Microsoft.VisualStudio.Web.Mvc.Scaffolding.BuiltIn" #>
<#
    MvcTextTemplateHost mvcHost = (MvcTextTemplateHost)(Host);
    var modelType = mvcHost.ModelType;
    var modelTypeName = mvcHost.ModelType.Name; 
    var modelTypeNamespace = mvcHost.ModelType.Namespace; 
    var modelTypeCamel = mvcHost.ExtendedProperties.ModelTypeCamel; 
    var primaryKeyName = mvcHost.PrimaryKeys[0].Name;
    var modelTypePluralized = mvcHost.ExtendedProperties.ModelTypePluralized; 
    var modelTypePluralizedCamel = mvcHost.ExtendedProperties.ModelTypePluralizedCamel; 
    var relatedModels = mvcHost.RelatedProperties.Values;
#>
/// <reference path="_references.js" />

window.<#= modelTypeName #> = function (initialData) {
    var self = this;
    upshot.map(initialData, upshot.type(<#= modelTypeName #>), self);
<# foreach (var relatedModel in relatedModels) { #>

    self.<#= relatedModel.PropertyName #>Text = ko.computed(function () {
        return self.<#= relatedModel.PropertyName #>() ? self.<#= relatedModel.PropertyName #>().<#= relatedModel.DisplayPropertyName #>() : "(None)";
    });
<# } #>
}

window.<#= modelTypePluralized #>ViewModel = function () {
    // Private data
    var self = this;
    var dataSource = upshot.dataSources.<#= modelTypePluralized #>.refresh();
<# foreach (var relatedModel in relatedModels) { #>
    var <#= relatedModel.PropertyName.ToLowerInvariant() #>OptionsDataSource = upshot.dataSources.<#= relatedModel.PropertyName #>OptionsFor<#= modelTypeName #>.refresh();
<# } #>

    // Public data
    self.<#= modelTypePluralizedCamel #> = dataSource.getEntities();
<# foreach (var relatedModel in relatedModels) { #>
    self.<#= relatedModel.PropertyName.ToLowerInvariant() #>Options = <#= relatedModel.PropertyName.ToLowerInvariant() #>OptionsDataSource.getEntities();
<# } #>
    self.editing<#= modelTypeName #> = ko.observable();
    self.validationRules = $.extend({}, dataSource.getEntityValidationRules(), {
        submitHandler: function () { self.acceptEdit() },
        resetFormOnChange: self.editing<#= modelTypeName #>
    });

    // Navigation
    self.nav = new NavHistory({
        params: { editItem: null },
        onNavigate: function (navEntry) {
            dataSource.findById(navEntry.params.editItem, self.editing<#= modelTypeName #>);
        }
    }).initialize({ linkToUrl: true });

    // Public operations
    self.openEditor = function (item) {
        self.nav.navigate({ editItem: dataSource.getEntityId(item) });
    }

    self.closeEditor = function () {
        self.nav.navigate({ editItem: null });
    }

    self.saveAll = function () {
        dataSource.commitChanges(null, showFirstInvalidItem); // On error, display the affected item
    }

    self.revertAll = function () {
        dataSource.revertChanges();
    }

    self.acceptEdit = function () {
        self.closeEditor();
    }

    self.rejectEdit = function () {
        var currentItem = self.editing<#= modelTypeName #>();
        dataSource.revertChanges(currentItem);
        self.closeEditor();
    }

    self.create<#= modelTypeName #> = function () {
        var newItem = new <#= modelTypeName #>({});
        self.<#= modelTypePluralizedCamel #>.push(newItem);
        self.openEditor(newItem);
    }

    self.deleteCurrent<#= modelTypeName #> = function () {
        var currentItem = self.editing<#= modelTypeName #>();
        dataSource.deleteEntity(currentItem);
        self.closeEditor();
    }

    // Private functions
    function showFirstInvalidItem() {
        var firstError = dataSource.getEntityErrors()[0];
        if (firstError)
            self.openEditor(firstError.entity);
    }
}

<#+
// Describes the information about a property on the model
class ModelProperty {
    public string Name { get; set; }
    public string AssociationName { get; set; }
    public string ValueExpression { get; set; }
    public string ModelValueExpression { get; set; }
    public string ItemValueExpression { get; set; }
    public Type UnderlyingType { get; set; }
    public bool IsPrimaryKey { get; set; }
    public bool IsForeignKey { get; set; }
    public bool IsReadOnly { get; set; }
    public bool Scaffold { get; set; }
}

// Change this list to include any non-primitive types you think should be eligible for display/edit
static Type[] bindableNonPrimitiveTypes = new[] {
    typeof(string),
    typeof(decimal),
    typeof(Guid),
    typeof(DateTime),
    typeof(DateTimeOffset),
    typeof(TimeSpan),
};

// Call this to get the list of properties in the model. Change this to modify or add your
// own default formatting for display values.
List<ModelProperty> GetModelProperties(Type type, bool includeUnbindableProperties) {
    List<ModelProperty> results = GetEligibleProperties(type, includeUnbindableProperties);
    
    foreach (ModelProperty prop in results) {
        if (prop.UnderlyingType == typeof(double) || prop.UnderlyingType == typeof(decimal)) {
            prop.ModelValueExpression = "String.Format(\"{0:F}\", " + prop.ModelValueExpression + ")";
        }
        else if (prop.UnderlyingType == typeof(DateTime)) {
            prop.ModelValueExpression = "String.Format(\"{0:g}\", " + prop.ModelValueExpression + ")";
        }
    }

    return results;
}

// Call this to determine if property has scaffolding enabled
bool Scaffold(PropertyInfo property) {
    foreach (object attribute in property.GetCustomAttributes(true)) {
        var scaffoldColumn = attribute as ScaffoldColumnAttribute;
        if (scaffoldColumn != null && !scaffoldColumn.Scaffold) {
            return false;
        }
    }
    return true;
}

// Call this to determine if the property represents a primary key. Change the
// code to change the definition of primary key.
bool IsPrimaryKey(PropertyInfo property) {
    if (string.Equals(property.Name, "id", StringComparison.OrdinalIgnoreCase)) {  // EF Code First convention
        return true;
    }

    if (string.Equals(property.Name, property.DeclaringType.Name + "id", StringComparison.OrdinalIgnoreCase)) {  // EF Code First convention
        return true;
    }

    foreach (object attribute in property.GetCustomAttributes(true)) {
        if (attribute is KeyAttribute) {  // WCF RIA Services and EF Code First explicit
            return true;
        }
        
        var edmScalar = attribute as EdmScalarPropertyAttribute;
        if (edmScalar != null && edmScalar.EntityKeyProperty) {  // EF traditional
            return true;
        }

        var column = attribute as ColumnAttribute;
        if (column != null && column.IsPrimaryKey) {  // LINQ to SQL
            return true;
        }
    }
    
    return false;
}

// This will return the primary key property name, if and only if there is exactly
// one primary key. Returns null if there is no PK, or the PK is composite.
string GetPrimaryKeyName(Type type) {
    IEnumerable<string> pkNames = GetPrimaryKeyNames(type);
    return pkNames.Count() == 1 ? pkNames.First() : null;
}

// This will return all the primary key names. Will return an empty list if there are none.
IEnumerable<string> GetPrimaryKeyNames(Type type) {
    return GetEligibleProperties(type, true).Where(mp => mp.IsPrimaryKey).Select(mp => mp.Name);
}

// Call this to determine if the property represents a foreign key.
bool IsForeignKey(PropertyInfo property) {
    return MvcTemplateHost.RelatedProperties.ContainsKey(property.Name);
}

// A foreign key, e.g. CategoryID, will have a value expression of Category.CategoryID
string GetValueExpressionSuffix(PropertyInfo property) {
    RelatedModel propertyModel;
    MvcTemplateHost.RelatedProperties.TryGetValue(property.Name, out propertyModel);

    return propertyModel != null ? propertyModel.PropertyName + "." + propertyModel.DisplayPropertyName : property.Name;
}

// A foreign key, e.g. CategoryID, will have an association name of Category
string GetAssociationName(PropertyInfo property) {
    RelatedModel propertyModel;
    MvcTemplateHost.RelatedProperties.TryGetValue(property.Name, out propertyModel);

    return propertyModel != null ? propertyModel.PropertyName : property.Name;
}

// Helper
List<ModelProperty> GetEligibleProperties(Type type, bool includeUnbindableProperties) {
    List<ModelProperty> results = new List<ModelProperty>();

    foreach (PropertyInfo prop in type.GetProperties(BindingFlags.Public | BindingFlags.Instance)) {
        Type underlyingType = Nullable.GetUnderlyingType(prop.PropertyType) ?? prop.PropertyType;
        if (prop.GetGetMethod() != null && prop.GetIndexParameters().Length == 0 && (includeUnbindableProperties || IsBindableType(underlyingType))) {
            string valueExpression = GetValueExpressionSuffix(prop);

            results.Add(new ModelProperty {
                Name = prop.Name,
                AssociationName = GetAssociationName(prop),
                ValueExpression = valueExpression,
                ModelValueExpression = "Model." + valueExpression,
                ItemValueExpression = "item." + valueExpression,
                UnderlyingType = underlyingType,
                IsPrimaryKey = IsPrimaryKey(prop),
                IsForeignKey = IsForeignKey(prop),
                IsReadOnly = prop.GetSetMethod() == null,
                Scaffold = Scaffold(prop)
            });
        }
    }

    return results;
}

// Helper
bool IsBindableType(Type type) {
    return type.IsPrimitive || bindableNonPrimitiveTypes.Contains(type);
}

MvcTextTemplateHost MvcTemplateHost {
    get {
        return (MvcTextTemplateHost)Host;
    }
}
#>

