<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Web.Http.Data.EntityFramework</name>
  </assembly>
  <members>
    <member name="T:System.Web.Http.Data.EntityFramework.DbContextExtensions">
      <summary> DbContext extension methods </summary>
    </member>
    <member name="M:System.Web.Http.Data.EntityFramework.DbContextExtensions.AttachAsModified(System.Data.Entity.DbSet,System.Object,System.Data.Entity.DbContext)">
      <summary> Extension method used to attach the specified entity as modified. This overload can be used in cases where the entity has a Timestamp member. This is a non-generic version </summary>
      <param name="dbSet">The <see cref="T:System.Data.Entity.DbSet" /> to attach to</param>
      <param name="entity">The current entity</param>
      <param name="dbContext">The coresponding <see cref="T:System.Data.Entity.DbContext" /></param>
    </member>
    <member name="M:System.Web.Http.Data.EntityFramework.DbContextExtensions.AttachAsModified(System.Data.Entity.DbSet,System.Object,System.Object,System.Data.Entity.DbContext)">
      <summary> Extension method used to attach the specified entity as modified, with the specified original state. This is a non-generic version. </summary>
      <param name="dbSet">The <see cref="T:System.Data.Entity.DbSet" /> to attach to.</param>
      <param name="current">The current entity.</param>
      <param name="original">The original entity.</param>
      <param name="dbContext">The corresponding <see cref="T:System.Data.Entity.DbContext" /></param>
    </member>
    <member name="M:System.Web.Http.Data.EntityFramework.DbContextExtensions.AttachAsModified``1(System.Data.Entity.DbSet{``0},``0,System.Data.Entity.DbContext)">
      <summary> Extension method used to attach the specified entity as modified. This overload can be used in cases where the entity has a Timestamp member. </summary>
      <param name="dbSet">The <see cref="T:System.Data.Entity.DbSet" /> to attach to</param>
      <param name="entity">The current entity</param>
      <param name="dbContext">The coresponding <see cref="T:System.Data.Entity.DbContext" /></param>
      <typeparam name="TEntity">The entity type</typeparam>
    </member>
    <member name="M:System.Web.Http.Data.EntityFramework.DbContextExtensions.AttachAsModified``1(System.Data.Entity.DbSet{``0},``0,``0,System.Data.Entity.DbContext)">
      <summary> Extension method used to attach the specified entity as modified, with the specified original state. </summary>
      <param name="dbSet">The <see cref="T:System.Data.Entity.DbSet" /> to attach to.</param>
      <param name="current">The current entity.</param>
      <param name="original">The original entity.</param>
      <param name="dbContext">The corresponding <see cref="T:System.Data.Entity.DbContext" /></param>
      <typeparam name="TEntity">The entity Type</typeparam>
    </member>
    <member name="T:System.Web.Http.Data.EntityFramework.DbDataController`1">
      <typeparam name="TContext"></typeparam>
    </member>
    <member name="M:System.Web.Http.Data.EntityFramework.DbDataController`1.#ctor">
      <summary> Protected constructor for the abstract class. </summary>
    </member>
    <member name="M:System.Web.Http.Data.EntityFramework.DbDataController`1.CreateDbContext">
      <summary> Returns the DbContext object. </summary>
    </member>
    <member name="P:System.Web.Http.Data.EntityFramework.DbDataController`1.DbContext">
      <summary> Gets the &lt;see cref="P:System.Web.Http.Data.EntityFramework.DbDataController`1.DbContext" /&gt;</summary>
    </member>
    <member name="M:System.Web.Http.Data.EntityFramework.DbDataController`1.DeleteEntity(System.Object)">
      <summary> Delete an entity from the &lt;see cref="P:System.Web.Http.Data.EntityFramework.DbDataController`1.DbContext" /&gt;, ensuring that its <see cref="T:System.Data.EntityState" /> is <see cref="F:System.Data.EntityState.Deleted" /></summary>
      <param name="entity">The entity to be deleted</param>
    </member>
    <member name="M:System.Web.Http.Data.EntityFramework.DbDataController`1.Dispose(System.Boolean)">
      <summary> See <see cref="T:System.IDisposable" />. </summary>
      <param name="disposing">A <see cref="T:System.Boolean" /> indicating whether or not the instance is currently disposing.</param>
    </member>
    <member name="M:System.Web.Http.Data.EntityFramework.DbDataController`1.Initialize(System.Web.Http.Controllers.HttpControllerContext)">
      <summary> Initializes the &lt;see cref="!:DbDataController" /&gt;. </summary>
      <param name="controllerContext">The <see cref="T:System.Web.Http.Controllers.HttpControllerContext" /> for this <see cref="T:System.Web.Http.Data.DataController" /> instance. Overrides must call the base method.</param>
    </member>
    <member name="M:System.Web.Http.Data.EntityFramework.DbDataController`1.InsertEntity(System.Object)">
      <summary> Insert an entity into the &lt;see cref="P:System.Web.Http.Data.EntityFramework.DbDataController`1.DbContext" /&gt;, ensuring its <see cref="T:System.Data.EntityState" /> is <see cref="F:System.Data.EntityState.Added" /></summary>
      <param name="entity">The entity to be inserted</param>
    </member>
    <member name="M:System.Web.Http.Data.EntityFramework.DbDataController`1.PersistChangeSet">
      <summary> This method is called to finalize changes after all the operations in the specified changeset have been invoked. All changes are committed to the DbContext, and any resulting optimistic concurrency errors are processed. </summary>
      <returns>True if the <see cref="T:System.Web.Http.Data.ChangeSet" /> was persisted successfully, false otherwise.</returns>
    </member>
    <member name="M:System.Web.Http.Data.EntityFramework.DbDataController`1.ResolveConflicts(System.Collections.Generic.IEnumerable{System.Data.Entity.Infrastructure.DbEntityEntry})">
      <summary> This method is called to finalize changes after all the operations in the specified changeset have been invoked. All changes are committed to the DbContext. &lt;remarks&gt;If the submit fails due to concurrency conflicts &lt;see cref="M:System.Web.Http.Data.EntityFramework.DbDataController`1.ResolveConflicts(System.Collections.Generic.IEnumerable{System.Data.Entity.Infrastructure.DbEntityEntry})" /&gt; will be called. If &lt;see cref="M:System.Web.Http.Data.EntityFramework.DbDataController`1.ResolveConflicts(System.Collections.Generic.IEnumerable{System.Data.Entity.Infrastructure.DbEntityEntry})" /&gt; returns true a single resubmit will be attempted. &lt;/remarks&gt;</summary>
      <returns>Returns true if the <see cref="T:System.Web.Http.Data.ChangeSet" /> was persisted successfully, false otherwise.</returns>
      <param name="conflicts">The list of concurrency conflicts that occurred</param>
    </member>
    <member name="M:System.Web.Http.Data.EntityFramework.DbDataController`1.UpdateEntity(System.Object)">
      <summary> Update an entity in the &lt;see cref="P:System.Web.Http.Data.EntityFramework.DbDataController`1.DbContext" /&gt;, ensuring it is treated as a modified entity </summary>
      <param name="entity">The entity to be updated</param>
    </member>
    <member name="T:System.Web.Http.Data.EntityFramework.LinqToEntitiesDataController`1">
      <summary> Base class for DataControllers operating on LINQ To Entities data models </summary>
      <typeparam name="TContext">The Type of the LINQ To Entities ObjectContext</typeparam>
    </member>
    <member name="M:System.Web.Http.Data.EntityFramework.LinqToEntitiesDataController`1.#ctor">
      <summary> Protected constructor because this is an abstract class </summary>
    </member>
    <member name="M:System.Web.Http.Data.EntityFramework.LinqToEntitiesDataController`1.CreateObjectContext">
      <summary> Creates and returns the &lt;see cref="P:System.Web.Http.Data.EntityFramework.LinqToEntitiesDataController`1.ObjectContext" /&gt; instance that will be used by this provider. </summary>
    </member>
    <member name="M:System.Web.Http.Data.EntityFramework.LinqToEntitiesDataController`1.DeleteEntity``1(``0)">
      <summary> Delete an entity from the &lt;see cref="P:System.Web.Http.Data.EntityFramework.LinqToEntitiesDataController`1.ObjectContext" /&gt;, ensuring that its <see cref="T:System.Data.EntityState" /> is <see cref="F:System.Data.EntityState.Deleted" /></summary>
      <param name="entity">The entity to be deleted</param>
      <typeparam name="TEntity">The entity type</typeparam>
    </member>
    <member name="M:System.Web.Http.Data.EntityFramework.LinqToEntitiesDataController`1.Dispose(System.Boolean)">
      <summary> See <see cref="T:System.IDisposable" />. </summary>
      <param name="disposing">A <see cref="T:System.Boolean" /> indicating whether or not the instance is currently disposing.</param>
    </member>
    <member name="M:System.Web.Http.Data.EntityFramework.LinqToEntitiesDataController`1.Initialize(System.Web.Http.Controllers.HttpControllerContext)">
      <summary> Initializes this <see cref="T:System.Web.Http.Data.DataController" />. </summary>
      <param name="controllerContext">The <see cref="T:System.Web.Http.Controllers.HttpControllerContext" /> for this <see cref="T:System.Web.Http.Data.DataController" /> instance. Overrides must call the base method.</param>
    </member>
    <member name="M:System.Web.Http.Data.EntityFramework.LinqToEntitiesDataController`1.InsertEntity``1(``0)">
      <summary> Insert an entity into the &lt;see cref="P:System.Web.Http.Data.EntityFramework.LinqToEntitiesDataController`1.ObjectContext" /&gt;, ensuring its <see cref="T:System.Data.EntityState" /> is <see cref="F:System.Data.EntityState.Added" /></summary>
      <param name="entity">The entity to be inserted</param>
      <typeparam name="TEntity">The entity type</typeparam>
    </member>
    <member name="P:System.Web.Http.Data.EntityFramework.LinqToEntitiesDataController`1.ObjectContext">
      <summary> Gets the &lt;see cref="P:System.Web.Http.Data.EntityFramework.LinqToEntitiesDataController`1.ObjectContext" /&gt;</summary>
    </member>
    <member name="M:System.Web.Http.Data.EntityFramework.LinqToEntitiesDataController`1.PersistChangeSet">
      <summary> This method is called to finalize changes after all the operations in the specified changeset have been invoked. All changes are committed to the ObjectContext, and any resulting optimistic concurrency errors are processed. </summary>
      <returns>True if the <see cref="T:System.Web.Http.Data.ChangeSet" /> was persisted successfully, false otherwise.</returns>
    </member>
    <member name="M:System.Web.Http.Data.EntityFramework.LinqToEntitiesDataController`1.ResolveConflicts(System.Collections.Generic.IEnumerable{System.Data.Objects.ObjectStateEntry})">
      <summary> This method is called to finalize changes after all the operations in the specified changeset have been invoked. All changes are committed to the ObjectContext. &lt;remarks&gt;If the submit fails due to concurrency conflicts &lt;see cref="M:System.Web.Http.Data.EntityFramework.LinqToEntitiesDataController`1.ResolveConflicts(System.Collections.Generic.IEnumerable{System.Data.Objects.ObjectStateEntry})" /&gt; will be called. If &lt;see cref="M:System.Web.Http.Data.EntityFramework.LinqToEntitiesDataController`1.ResolveConflicts(System.Collections.Generic.IEnumerable{System.Data.Objects.ObjectStateEntry})" /&gt; returns true a single resubmit will be attempted. &lt;/remarks&gt;</summary>
      <returns>Returns true if the <see cref="T:System.Web.Http.Data.ChangeSet" /> was persisted successfully, false otherwise.</returns>
      <param name="conflicts">The list of concurrency conflicts that occurred</param>
    </member>
    <member name="M:System.Web.Http.Data.EntityFramework.LinqToEntitiesDataController`1.UpdateEntity``1(``0)">
      <summary> Update an entity in the &lt;see cref="P:System.Web.Http.Data.EntityFramework.LinqToEntitiesDataController`1.ObjectContext" /&gt;, ensuring it is treated as a modified entity </summary>
      <param name="entity">The entity to be updated</param>
      <typeparam name="TEntity">The entity type</typeparam>
    </member>
    <member name="T:System.Web.Http.Data.EntityFramework.ObjectContextExtensions">
      <summary> ObjectContext extension methods </summary>
    </member>
    <member name="M:System.Web.Http.Data.EntityFramework.ObjectContextExtensions.AttachAsModified``1(System.Data.Objects.ObjectSet{``0},``0)">
      <summary> Extension method used to attach the specified entity as modified. This overload can be used in cases where the entity has a Timestamp member. </summary>
      <param name="objectSet">The ObjectSet to attach to</param>
      <param name="entity">The current entity state</param>
      <typeparam name="TEntity">The entity Type</typeparam>
    </member>
    <member name="M:System.Web.Http.Data.EntityFramework.ObjectContextExtensions.AttachAsModified``1(System.Data.Objects.ObjectSet{``0},``0,``0)">
      <summary> Extension method used to attach the specified entity as modified, with the specified original state. </summary>
      <param name="objectSet">The ObjectSet to attach to</param>
      <param name="current">The current entity state</param>
      <param name="original">The original entity state</param>
      <typeparam name="TEntity">The entity Type</typeparam>
    </member>
    <member name="T:System.Web.Http.Data.EntityFramework.Metadata.DbMetadataProviderAttribute">
      <summary> Attribute applied to a &lt;see cref="T:System.Web.Http.Data.EntityFramework.DbDataController`1" /&gt; that exposes LINQ to Entities mapped Types. </summary>
    </member>
    <member name="M:System.Web.Http.Data.EntityFramework.Metadata.DbMetadataProviderAttribute.#ctor">
      <summary> Default constructor. Using this constructor, the Type of the LINQ To Entities DbContext will be inferred from the <see cref="T:System.Web.Http.Data.DataController" /> the attribute is applied to. </summary>
    </member>
    <member name="M:System.Web.Http.Data.EntityFramework.Metadata.DbMetadataProviderAttribute.#ctor(System.Type)">
      <summary> Constructs an attribute for the specified LINQ To Entities DbContext Type. </summary>
      <param name="dbContextType">The LINQ To Entities ObjectContext Type.</param>
    </member>
    <member name="M:System.Web.Http.Data.EntityFramework.Metadata.DbMetadataProviderAttribute.CreateProvider(System.Type,System.Web.Http.Data.Metadata.MetadataProvider)">
      <summary> This method creates an instance of the <see cref="T:System.Web.Http.Data.Metadata.MetadataProvider" />. </summary>
      <returns>The metadata provider.</returns>
      <param name="controllerType">The <see cref="T:System.Web.Http.Data.DataController" /> Type to create a metadata provider for.</param>
      <param name="parent">The existing parent metadata provider.</param>
    </member>
    <member name="P:System.Web.Http.Data.EntityFramework.Metadata.DbMetadataProviderAttribute.DbContextType">
      <summary> The Linq To Entities DbContext Type. </summary>
    </member>
    <member name="T:System.Web.Http.Data.EntityFramework.Metadata.LinqToEntitiesMetadataProviderAttribute">
      <summary> Attribute applied to a <see cref="T:System.Web.Http.Data.DataController" /> that exposes LINQ to Entities mapped Types. </summary>
    </member>
    <member name="M:System.Web.Http.Data.EntityFramework.Metadata.LinqToEntitiesMetadataProviderAttribute.#ctor">
      <summary> Default constructor. Using this constructor, the Type of the LINQ To Entities ObjectContext will be inferred from the <see cref="T:System.Web.Http.Data.DataController" /> the attribute is applied to. </summary>
    </member>
    <member name="M:System.Web.Http.Data.EntityFramework.Metadata.LinqToEntitiesMetadataProviderAttribute.#ctor(System.Type)">
      <summary> Constructs an attribute for the specified LINQ To Entities ObjectContext Type. </summary>
      <param name="objectContextType">The LINQ To Entities ObjectContext Type.</param>
    </member>
    <member name="M:System.Web.Http.Data.EntityFramework.Metadata.LinqToEntitiesMetadataProviderAttribute.CreateProvider(System.Type,System.Web.Http.Data.Metadata.MetadataProvider)">
      <summary> This method creates an instance of the <see cref="T:System.Web.Http.Data.Metadata.MetadataProvider" />. </summary>
      <returns>The metadata provider.</returns>
      <param name="controllerType">The <see cref="T:System.Web.Http.Data.DataController" /> Type to create a metadata provider for.</param>
      <param name="parent">The existing parent metadata provider.</param>
    </member>
    <member name="P:System.Web.Http.Data.EntityFramework.Metadata.LinqToEntitiesMetadataProviderAttribute.ObjectContextType">
      <summary> The Linq To Entities ObjectContext Type. </summary>
    </member>
  </members>
</doc>